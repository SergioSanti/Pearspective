// Script para testar controle de acesso de admin
// Execute este script no console do navegador

console.log('üîí Teste de Controle de Acesso - Admin');

// Fun√ß√£o para verificar tipo de usu√°rio atual
function checkCurrentUser() {
  console.log('\nüë§ Verificando usu√°rio atual...');
  
  const userName = localStorage.getItem('userName');
  const userType = localStorage.getItem('tipo_usuario');
  const userId = localStorage.getItem('userId');
  
  console.log('üìä Dados do usu√°rio:');
  console.log('- Nome:', userName);
  console.log('- Tipo:', userType);
  console.log('- ID:', userId);
  
  return { userName, userType, userId };
}

// Fun√ß√£o para simular login como admin
function simulateAdminLogin() {
  console.log('\nüîê Simulando login como admin...');
  
  localStorage.setItem('userName', 'admin');
  localStorage.setItem('tipo_usuario', 'admin');
  localStorage.setItem('userId', '1');
  
  console.log('‚úÖ Login como admin simulado');
  console.log('üîÑ Recarregando p√°gina...');
  
  setTimeout(() => {
    window.location.reload();
  }, 1000);
}

// Fun√ß√£o para simular login como usu√°rio comum
function simulateUserLogin() {
  console.log('\nüë§ Simulando login como usu√°rio comum...');
  
  localStorage.setItem('userName', 'sergio');
  localStorage.setItem('tipo_usuario', 'usuario');
  localStorage.setItem('userId', '2');
  
  console.log('‚úÖ Login como usu√°rio comum simulado');
  console.log('üîÑ Recarregando p√°gina...');
  
  setTimeout(() => {
    window.location.reload();
  }, 1000);
}

// Fun√ß√£o para testar acesso ao cat√°logo
function testCatalogAccess() {
  console.log('\nüìö Testando acesso ao cat√°logo...');
  
  const userType = localStorage.getItem('tipo_usuario');
  
  if (userType === 'admin') {
    console.log('‚úÖ Usu√°rio admin - deve ter acesso completo');
    console.log('üîß Bot√£o admin deve estar vis√≠vel');
    console.log('‚úèÔ∏è Bot√µes de editar devem estar vis√≠veis');
    console.log('üóëÔ∏è Bot√µes de excluir devem estar vis√≠veis');
  } else {
    console.log('üîí Usu√°rio comum - acesso restrito');
    console.log('‚ùå Bot√£o admin deve estar oculto');
    console.log('‚ùå Bot√µes de editar devem estar ocultos');
    console.log('‚ùå Bot√µes de excluir devem estar ocultos');
  }
}

// Fun√ß√£o para testar tentativas de acesso n√£o autorizado
function testUnauthorizedAccess() {
  console.log('\nüö´ Testando tentativas de acesso n√£o autorizado...');
  
  const userType = localStorage.getItem('tipo_usuario');
  
  if (userType !== 'admin') {
    console.log('üîí Usu√°rio n√£o √© admin - testando restri√ß√µes...');
    
    // Tentar acessar fun√ß√µes de admin
    if (window.courseManager) {
      console.log('üìù Testando showAddForm()...');
      window.courseManager.showAddForm();
      
      console.log('üìù Testando showEditForm(1)...');
      window.courseManager.showEditForm(1);
      
      console.log('üìù Testando showDeleteModal(1)...');
      window.courseManager.showDeleteModal(1);
      
      console.log('üìù Testando toggleAdminMode()...');
      window.courseManager.toggleAdminMode();
    } else {
      console.log('‚ùå CourseManager n√£o encontrado');
    }
  } else {
    console.log('‚úÖ Usu√°rio √© admin - acesso permitido');
  }
}

// Fun√ß√£o para verificar elementos visuais
function checkVisualElements() {
  console.log('\nüëÅÔ∏è Verificando elementos visuais...');
  
  const adminToggle = document.getElementById('admin-toggle');
  const adminPanel = document.getElementById('admin-panel');
  const editButtons = document.querySelectorAll('.edit-course');
  const deleteButtons = document.querySelectorAll('.delete-course');
  
  console.log('üîß Bot√£o Admin:', adminToggle ? (adminToggle.style.display === 'none' ? '‚ùå Oculto' : '‚úÖ Vis√≠vel') : '‚ùå N√£o encontrado');
  console.log('üìã Painel Admin:', adminPanel ? (adminPanel.style.display === 'none' ? '‚ùå Oculto' : '‚úÖ Vis√≠vel') : '‚ùå N√£o encontrado');
  console.log('‚úèÔ∏è Bot√µes Editar:', editButtons.length > 0 ? `${editButtons.length} encontrados` : '‚ùå N√£o encontrados');
  console.log('üóëÔ∏è Bot√µes Excluir:', deleteButtons.length > 0 ? `${deleteButtons.length} encontrados` : '‚ùå N√£o encontrados');
}

// Fun√ß√£o para teste completo
function runCompleteTest() {
  console.log('\nüß™ Executando teste completo de controle de acesso...');
  
  // 1. Verificar usu√°rio atual
  const user = checkCurrentUser();
  
  // 2. Testar acesso ao cat√°logo
  testCatalogAccess();
  
  // 3. Verificar elementos visuais
  checkVisualElements();
  
  // 4. Testar tentativas n√£o autorizadas
  testUnauthorizedAccess();
  
  console.log('\n‚úÖ Teste completo finalizado!');
}

// Expor fun√ß√µes para uso no console
window.testAdminAccess = {
  checkCurrentUser,
  simulateAdminLogin,
  simulateUserLogin,
  testCatalogAccess,
  testUnauthorizedAccess,
  checkVisualElements,
  runCompleteTest
};

console.log('\nüìù Fun√ß√µes dispon√≠veis:');
console.log('- testAdminAccess.runCompleteTest() - Teste completo');
console.log('- testAdminAccess.simulateAdminLogin() - Login como admin');
console.log('- testAdminAccess.simulateUserLogin() - Login como usu√°rio');
console.log('- testAdminAccess.checkCurrentUser() - Verificar usu√°rio atual');
console.log('- testAdminAccess.testCatalogAccess() - Testar acesso ao cat√°logo');
console.log('- testAdminAccess.checkVisualElements() - Verificar elementos visuais');

// Executar teste
runCompleteTest(); 